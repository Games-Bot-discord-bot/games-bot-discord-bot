"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
const WebhookError_1 = require("./WebhookError");
const centra = require('centra');
/**
 * Represents a discord-message
 */
class Message {
    /**
     * Represents a discord-message
     * @param {Object} messageData Raw API-Data from Discord
     * @param {URL} webhookurl Webhook-URL this message belongs to
     */
    constructor(messageData, webhookurl) {
        this.webhookUrl = webhookurl;
        for (const data in messageData) {
            this[data] = messageData[data];
        }
    }
    /**
     * Deletes this message
     * @return {Promise}
     */
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield centra(this.webhookUrl + `/messages/${this.id}`, 'DELETE')
                .header('Content-Type', 'application/json')
                .send();
            if (res.statusCode !== 204)
                throw new WebhookError_1.WebhookError(JSON.parse(res.body.toString()));
            return true;
        });
    }
    /**
     * Edits this message
     * @param {String} content Content of this message
     * @param {APIEmbed} embeds Array of [embeds](https://discord-api-types.dev/api/discord-api-types-v10/interface/APIEmbed) attached to this message
     * @param {Object} allowedMentions  [Allowed-Mentions-Object](https://discord-api-types.dev/api/discord-api-types-v10/interface/APIAllowedMentions)
     * @param {Array} components  Array of [Message-Component-Action-Rows](https://discord-api-types.dev/api/discord-api-types-v10/interface/APIActionRowComponent). âš  Most components will only work, if the webhook is owned by an application.     * @return {Promise<Message>} New message
     */
    edit(content, embeds = [], allowedMentions = {}, components = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield centra(this.webhookUrl + `/messages/${this.id}`, 'PATCH').body({
                content: content,
                embeds: embeds,
                allowed_mentions: allowedMentions,
                components
            })
                .header('Content-Type', 'application/json')
                .send();
            if (res.statusCode === 204)
                throw new WebhookError_1.WebhookError(JSON.parse(res.body.toString()));
            return new Message(JSON.parse(res.body.toString()), this.webhookUrl);
        });
    }
}
exports.Message = Message;
